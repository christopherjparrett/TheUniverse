name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'

jobs:
  # Backend Linting
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  # Frontend Linting
  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./Frontend
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./Frontend
      run: npm run lint

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_planets_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: Run tests
      working-directory: ./Backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_planets_db
        JWT_SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        JWT_ALGORITHM: HS256
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./Backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./Frontend
      run: npm ci
      
    - name: Run tests
      working-directory: ./Frontend
      run: npm run test:run

  # Docker Build Validation
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend
        file: ./Backend/Dockerfile
        push: false
        tags: planets-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend
        file: ./Frontend/Dockerfile
        push: false
        tags: planets-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        # Test that docker-compose.yml is valid
        docker-compose config
        
        # Test that services can be built
        docker-compose build --no-cache

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Start services with Docker Compose
      run: |
        # Create test environment file
        echo "POSTGRES_DB=test_planets_db" >> .env.test
        echo "POSTGRES_USER=test_user" >> .env.test
        echo "POSTGRES_PASSWORD=test_password" >> .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@db:5432/test_planets_db" >> .env.test
        echo "JWT_SECRET_KEY=test-secret-key-for-integration-tests" >> .env.test
        echo "JWT_ALGORITHM=HS256" >> .env.test
        echo "JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env.test
        
        # Start services
        docker-compose --env-file .env.test up -d
        
        # Wait for services to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        
    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:8000/health
        
        # Test API endpoints
        curl -f http://localhost:8000/planets
        
        # Test authentication flow
        TOKEN=$(curl -s -X POST http://localhost:8000/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username": "admin", "password": "admin123"}' | \
          jq -r '.access_token')
        
        curl -f -H "Authorization: Bearer $TOKEN" http://localhost:8000/auth/me
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose --env-file .env.test down -v
        rm -f .env.test

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "This would typically deploy to a staging server"
        echo "For now, we'll just validate the deployment configuration"
        
        # Validate environment configuration
        if [ -f ".env.example" ]; then
          echo "✅ Environment template found"
        else
          echo "❌ Environment template missing"
          exit 1
        fi
        
        # Validate Docker configuration
        docker-compose config > /dev/null
        echo "✅ Docker Compose configuration is valid"
        
        echo "🎉 Staging deployment validation complete!"
